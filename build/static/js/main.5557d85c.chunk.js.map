{"version":3,"sources":["component/singleJob.js","component/todoList.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","styled","input","attrs","props","type","SingleJob","job","onChange","onDelete","showDelete","className","id","checked","finish","htmlFor","title","onClick","Button","button","DelButton","Input","TodoList","filter","useState","jobList","setJobList","jobDetail","setJobDetail","filterList","setFilterList","useEffect","list","JSON","parse","localStorage","getItem","length","fList","handleCheck","newJobList","jobIndex","findIndex","setItem","stringify","handleDelete","to","onSubmit","e","preventDefault","newid","unshift","alert","placeholder","value","currentTarget","map","key","clear","App","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5557d85c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\r\n\r\nconst Checkbox = styled.input.attrs((props) => ({\r\n  type: \"checkbox\",\r\n}))`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 10px 10px 10px 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction SingleJob({ job, onChange, onDelete, showDelete }) {\r\n  return (\r\n    <div className=\"singleJob\">\r\n      <Checkbox id={job.id} checked={job.finish ? \"checked\" : false} onChange={() => onChange(job.id)} />\r\n      <label htmlFor={job.id} className={job.finish ? \"finished\" : null}>\r\n        {job.title}\r\n      </label>\r\n      {showDelete ? (\r\n        <button onClick={() => onDelete(job.id)}>\r\n          <DeleteOutlinedIcon />\r\n        </button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleJob;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport SingleJob from \"./singleJob\";\r\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\r\n\r\n//styled component\r\nconst Button = styled.button`\r\n  background: #6da6f2;\r\n  color: #fff;\r\n  font-size: 1em;\r\n  padding: 15px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  min-width: 100px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DelButton = styled(Button)`\r\n  background: #f18989;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border-radius: 10px;\r\n  border: 1px solid #ccc;\r\n  display: block;\r\n  padding: 15px;\r\n  flex-grow: 1;\r\n  height: 20px;\r\n`;\r\n\r\nfunction TodoList({ filter }) {\r\n  const [jobList, setJobList] = useState([]);\r\n  const [jobDetail, setJobDetail] = useState(\"\");\r\n  const [filterList, setFilterList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //load localstorage\r\n    const list = JSON.parse(localStorage.getItem(\"jobList\"));\r\n\r\n    if (jobList.length === 0 && list !== null) {\r\n      //load job list\r\n      setJobList(list);\r\n    } else {\r\n      let fList = [];\r\n      if (filter === \"active\") {\r\n        fList = jobList.filter((job) => job.finish === false);\r\n      } else if (filter === \"completed\") {\r\n        fList = jobList.filter((job) => job.finish === true);\r\n      } else {\r\n        fList = [...jobList];\r\n      }\r\n\r\n      setFilterList(fList);\r\n    }\r\n  }, [jobList, filter]);\r\n\r\n  const handleSubmit = (e) => {\r\n    //add job to list\r\n    e.preventDefault();\r\n\r\n    if (jobDetail !== \"\") {\r\n      const newJobList = [...jobList];\r\n      const newid = jobList.length > 0 ? jobList[0].id + 1 : 1;\r\n      newJobList.unshift({ id: newid, title: jobDetail, finish: false });\r\n\r\n      setJobList(newJobList);\r\n      setJobDetail(\"\");\r\n\r\n      localStorage.setItem(\"jobList\", JSON.stringify(newJobList));\r\n    } else {\r\n      alert(\"Please input job detail.\");\r\n    }\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setJobDetail(e.currentTarget.value);\r\n  };\r\n\r\n  const handleCheck = (id) => {\r\n    const newJobList = [...jobList];\r\n    const jobIndex = jobList.findIndex((job) => job.id === id);\r\n    newJobList[jobIndex].finish = !newJobList[jobIndex].finish;\r\n\r\n    setJobList(newJobList);\r\n    localStorage.setItem(\"jobList\", JSON.stringify(newJobList));\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    const newJobList = jobList.filter((job) => job.id !== id);\r\n\r\n    setJobList(newJobList);\r\n    localStorage.setItem(\"jobList\", JSON.stringify(newJobList));\r\n  };\r\n\r\n  const handleDeleteAll = (e) => {\r\n    const newJobList = [];\r\n\r\n    setJobList(newJobList);\r\n    localStorage.clear();\r\n  };\r\n\r\n  return (\r\n    <section className=\"todolist\">\r\n      <h1>#todo</h1>\r\n\r\n      <nav>\r\n        <ul>\r\n          <li className={filter === \"all\" ? \"active\" : null}>\r\n            <NavLink to=\"/\">All</NavLink>\r\n          </li>\r\n          <li className={filter === \"active\" ? \"active\" : null}>\r\n            <NavLink to=\"/active\">Active</NavLink>\r\n          </li>\r\n          <li className={filter === \"completed\" ? \"active\" : null}>\r\n            <NavLink to=\"/completed\">Completed</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n\r\n      {filter !== \"completed\" ? (\r\n        <form onSubmit={handleSubmit}>\r\n          <Input type=\"text\" placeholder=\"add detail\" value={jobDetail} onChange={handleInput}></Input>\r\n          <Button>Add</Button>\r\n        </form>\r\n      ) : null}\r\n      <div className=\"result\">\r\n        {filterList.map((job) => (\r\n          <SingleJob key={job.id} job={job} onChange={handleCheck} onDelete={handleDelete} showDelete={filter === \"completed\" ? true : false} />\r\n        ))}\r\n      </div>\r\n      {filter === \"completed\" && filterList.length > 0 ? (\r\n        <div className=\"deleteRow\">\r\n          <DelButton onClick={handleDeleteAll}>\r\n            <DeleteOutlinedIcon />\r\n            delete all\r\n          </DelButton>\r\n        </div>\r\n      ) : null}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport TodoList from \"./component/todoList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <main>\n      <Switch>\n        <Route path=\"/active\" render={(props) => <TodoList {...props} filter=\"active\" />} />\n        <Route path=\"/completed\" render={(props) => <TodoList {...props} filter=\"completed\" />} />\n        <Route path=\"/\" render={(props) => <TodoList {...props} filter=\"all\" />} />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./assets/style.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}